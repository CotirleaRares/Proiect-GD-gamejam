ADDITIONAL TUTORIAL GIT
Daca este prima data cand utilizam git bash si git in general vom folosi instructiunea : „ git config –global user.name „NUME USER” , daca avem un username deja creat diferit de acesta putem forta schimbarea lui la aceasta valoare prin : „git config –global --replace-all user.name „NUME USER” ”;  pe langa username avem si un user-mail pe care il stabilim : „git config --global user.mail usermail@yahoo.com ” ” – username-ul si emailul dorim sa fie la fel ca in bitbucket , deci ar fi bine sa creezi un nou bitbucket repo ,dar trebuie sa fim atenti sa debifam/uncheck private repo cand cream . Ca sa stabilim editorul default al gitului punem instructiunea : „git config –global core.editor notepad/alt_editor ” .
Daca am facut setup-ul deja putem vedea datele configurarii prin instructiunea :” git config --list ” .
Daca dorim sa folosim git clone intr-un fisier local-pur si simplu scriem instructiunea : „git clone adresaURL” intr-un file local ; in caz contrar putem initializa un git intr-un fisier cu acelasi nume cu al repo-ului cu instructiunea :” git init ” , apoi adaugam originea remote prin : „ git remote add origin adresaURL ” (in caz in care vrem sa vedem originea gitului nostru in fisier putem scrie „ git remote -v ” ) .
Putem incepe sa adaugam diferite tipuri de fisiere in fisierul mare cu acelasi nume ca al repo-ului – ca sa le vedem statusul/daca sunt sau nu urmarite de git scriem : „ git status ” daca un fisier e rosu inseamna ca nu e urmarit/updatat , daca dorim ca un fisier sa fie urmarit vom avea nevoie de instructiunea : „ git add filename.nume_extensie ” alternativ putem face ca toate fisierele adaugate de noi in fisierul local sa fie urmarite prin :  „ git add .” vom da din nou git status sa stim ca fisierele pot fi primite pe origine .Vom fi nevoiti sa dam commit pentru fisiere : „ git commit -m „mesaj de commit” ” , dupa aceea vom face push cu : „git push -u -f origin master ” ( -f forteaza acest push in caz ca git-ul nu vrea sa accepte , se foloseste de multe ori prima data intr-un repo nou );git status ne spune de asemeni si daca un fisier a fost modificat local .
Acum putin despre ramuri/branches in care putem introduce diferent non-destructive intr-un repo,ca sa vizualizam ramurile prezente introducem : „ git branch -vv ” , pentru a crea un nou branch : „ git checkout -b nume-branch-nou master ” . Stim in ce branch ne aflam intrucat va avea la stanga „**” , pentru a schimba branc-ul putem cu instructiunea : „ git checkout nume-branch ” ; daca branch-ul este nou creat de noi in terminal/gitbash atunci va fi nevoie sa dam : „ git push --set-upstream origin nume-branch ” . 
„ git fetch --all ” ne arata branch-urile noi create pe site (daca am ales sa facem acest lucru) si ne lasa sa interactionam cu ele , altfel nu le vom vedea 
„ git branch -r ” ne arata toate branch-urile remote pe care le avem in repo
„ git push -d origin nume-branch” va sterge tot branch-ul din repo
„ git merge nume-branch ” va fuziona branch-ul curent cu branch-ul specificat in instructiune
Dupa fiecare merge este nevoie de un push.
Intr-un text editor de ex. Vscode daca cautam cu ctrl shift f „<<<<<<<” ni se arata conflictele din merge de asemeni deasupra in ui va fi accept change daca dorim sa facem schimbarea si sa fortam merge .
Cu „git log --oneline” putem vedea coduri pentru commiturile facute , de aici putem copia un cod de pe un branch anume si sa scriem instructiunea : „git revert codcopiat”  apoi se apasa esc pentru a iesi din aces meniu .
Folosind „ git stash ” salveaza temporar local modificarile facute pe un branch fara a le da push sau commit ; „git stash apply ” aplica ultima modificare salvata in stash ; „git stash list ” arata lista elementelor salvate pe stash , iar  „git stash ckear ” va goli aceasta lista .
In gitignore putem pune numele unui fisier pentru a nu fi dus in repo din local .
